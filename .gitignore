bin
.classpath
.project
*.ser
*.txt
*.rar
.settings
target


package com.aamir.strutstospring;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import com.aamir.strutstospring.beans.Response;
import com.aamir.strutstospring.beans.UserForm;
import com.aamir.strutstospring.commons.RollupController;
import com.aamir.strutstospring.commons.RollupRepository;
import com.aamir.strutstospring.controller.HomeController;
 
import com.aamir.strutstospring.service.LoginService;
import com.aamir.strutstospring.service.UserService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;

@RunWith(MockitoJUnitRunner.class)
public class HomeControllerTest {

	 
	HomeController homeController;
	HttpServletRequest request;
	Model model;
	UserForm userForm;
	BindingResult bindResult;
	LoginService loginService;
	UserService userService;
	RollupRepository rollUpRepository;
	Response response;
	
	boolean isValid=true;
	String subAction = "";
	
	@Before
	public void setup(){
		
			 
		  homeController = Mockito.mock(HomeController.class);
		  loginService = Mockito.mock(LoginService.class);
		  request =Mockito.mock(HttpServletRequest.class);
		  rollUpRepository =Mockito.mock(RollupRepository.class);
		  model =Mockito.mock(Model.class);
		  userForm = Mockito.mock(UserForm.class);
		  bindResult = Mockito.mock(BindingResult.class);
		  userService = Mockito.mock(UserService.class);
		  response = Mockito.mock(Response.class);
		  
		  when(homeController.home()).thenReturn("redirect:/login");
		  when(homeController.login(model,request)).thenReturn("loginStatus");
		  when(homeController.manageUser(model,request,subAction,userForm,bindResult)).thenReturn("showUserPage");
		 
		  when(loginService.execute(request)).thenReturn(true);
		  
		  when(userService.execute(userForm,request)).thenReturn(response);
		  
		  
		  when(rollUpRepository.getUrlForSlo()).thenReturn("https://sso-devl.fanniemae.com/oam/serer/logout/fmslo.jsp");
		  
		  
		
	}
	
	
	@Test
	public void testHome(){
		assertEquals("redirect:/login", homeController.home());
	}
	
	@Test
	public void testLogin(){
		 
		assertTrue(loginService.execute(request));
	}
	
	@Test
	public void testForRollup(){
		 String sloUrl = "https://sso-devl.fanniemae.com/oam/serer/logout/fmslo.jsp";
				 assertEquals(sloUrl , rollUpRepository.getUrlForSlo());
	}
	
	@Test
	public void testLoginPage(){
		  assertEquals("loginStatus",homeController.login(model,request));
	}
	
	
	@Test
	public void testManageUserPage(){
			assertEquals("showUserPage",homeController.manageUser(model,request,subAction,userForm,bindResult));
	}
	
	@Test
	public void testManageUser(){
			assertEquals(response,userService.execute(userForm, request));
	}
	
}
